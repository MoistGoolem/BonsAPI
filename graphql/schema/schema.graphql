
#####*ROOT*#####
type Tree {
    _id: ID!
    name: String!
    conifer: Boolean
    broadleaf: Boolean
    evergreen: Boolean
    deciduous: Boolean
    creator: User!
}

type User {
    _id: ID!
    email: String!
    password: String
    createdTrees: [Tree!]
}

type AuthData {
    userId: ID!
    token: String!
    tokenExpiration: Int!
}

input TreeInput {
    name: String!
    conifer: Boolean!
    broadleaf: Boolean!
    evergreen: Boolean!
    deciduous: Boolean!
}

input UserInput {
    email: String!
    password: String!
}

type RootQuery {
    trees: [Tree!]!
    login(email: String!, password: String!): AuthData!
}

type RootMutation {
    createTree(treeInput: TreeInput): Tree
    createUser(userInput: UserInput): User
}

schema {
    query: RootQuery
    mutation: RootMutation
}


# #*TREE GROUPS*#
# type Conifers {
#     name: {
#         species: String!
#         genus: String!
#         family: String!
#         cultivar: String
#         variety: String
#     }
#     description: String
#     deciduous: Boolean!
#     evergreen: Boolean!
#     care: Care!
#     characteristics: Characteristics
#     propagation: Propagation
#     grafting: String
#     pests: [Pests]
#     diseases: [Diseases]
#     availability: String
# }
# type Broadleaf {
#     name: {
#         species: Species!
#         genus: Genus!
#         family: Family!
#         cultivar: String
#         variety: String
#     }
#     description: String
#     deciduous: Boolean!
#     evergreen: Boolean!
#     care: Care!
#     characteristics: Characteristics
#     propagation: Propagation
#     grafting: String
#     pests: [Pests]
#     diseases: [Diseases]
#     availability: String
# }

# #*TREE CARE*#
# type Care {
#     repotting: String!
#     medium: Medium!
#     light_pruning: String!
#     heavy_pruning: String!
#     wiring: String!
#     fertilizer: {
#         interval: String!
#         time_of_year: String!
#         fertilizer_type: String
#     }
#     placement: String!
#     watering: String!
#     other: String
# }
# type Medium {
#     id: ID!
#     medium: String!
# }
# type Propagation {
#     cutting: String
#     seed: String
# }

# #*PESTS AND DISEASES*#
# type Pests {
#     id: ID!
#     name: String!
#     identification: String
# }
# type Diseases {
#     id: ID!
#     name: String!
#     identification: String
# }

# #*CHARACTERISTICS*#
# type Characteristics {
#     fruit: Boolean
#     flowering: Boolean
#     leafs: String
#     deciduous: Boolean!
#     evergreen: Boolean!
#     bark: String
#     other: String
# }